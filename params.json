{
  "name": "iOS Hacker Wiki",
  "tagline": "",
  "body": "# Welcome to the iOS Hacker Wiki\r\n\r\nIf you have anything you want added to this wiki, feel free to open a [Pull Request](https://github.com/iOS-10-Stuffs/iOS-10-stuffs.github.io/pulls) or Tweet me [@ClevrPwn](https://twitter.com/ClevrPwn).\r\n\r\n## Kexts list\r\n\r\nList of all the kexts included....pretty self explanatory.\r\n\r\n[Kexts List](https://bitbucket.org/clevrpwn/ios-10-stuffs/wiki/Kexts%20list)\r\n\r\n## Mach Traps and MIG tables\r\n \r\nMach system calls are commonly known as \"traps\".\r\n\r\nAt the trap level, the interface to most Mach abstractions consists of messages sent to and from kernel ports representing those objects. The trap-level interfaces (such as mach_msg_overwrite_trap) and message formats are themselves abstracted in normal usage by the Mach Interface Generator (MIG). MIG is used to compile procedural interfaces to the message-based APIs, based on descriptions of those APIs.\r\n\r\n[Mach Traps and MIG tables](https://bitbucket.org/clevrpwn/ios-10-stuffs/wiki/Mach%20Traps%20and%20MIG%20tables)\r\n\r\n## sysctls\r\n`sysctl` is an interface for examining and dynamically changing parameters in UNIX-like operating systems.\r\n\r\n[sysctls](https://bitbucket.org/clevrpwn/ios-10-stuffs/wiki/Sysctls)\r\n\r\n## UNIX Syscalls \r\nA system call is the programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. This may include hardware-related services (for example, accessing a hard disk drive), creation and execution of new processes, and communication with integral kernel services such as process scheduling.\r\n\r\n[UNIX syscalls](https://bitbucket.org/clevrpwn/ios-10-stuffs/wiki/UNIX%20syscalls)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}